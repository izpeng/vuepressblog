(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{593:function(a,t,r){"use strict";r.r(t);var s=r(2),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[a._v("#")]),a._v(" 数据结构")]),a._v(" "),r("p",[a._v("数据结构是计算机存储、组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关。")]),a._v(" "),r("h2",{attrs:{id:"_1-1常用的数据结构编辑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1常用的数据结构编辑"}},[a._v("#")]),a._v(" 1.1常用的数据结构编辑")]),a._v(" "),r("p",[a._v("在计算机科学的发展过程中，数据结构也随之发展。程序设计中常用的数据结构包括如下几个。 [5]")]),a._v(" "),r("h3",{attrs:{id:"数组-array"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组-array"}},[a._v("#")]),a._v(" 数组(Array)")]),a._v(" "),r("p",[a._v("数组是一种聚合数据类型，它是将具有相同类型的若干变量有序地组织在一起的集合。数组可以说是最基本的数据结构，在各种编程语言中都有对应。一个数组可以分解为多个数组元素，按照数据元素的类型，数组可以分为整型数组、字符型数组、浮点型数组、指针数组和结构数组等。数组还可以有一维、二维以及多维等表现形式。 [5]")]),a._v(" "),r("h3",{attrs:{id:"栈-stack"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈-stack"}},[a._v("#")]),a._v(" 栈( Stack)")]),a._v(" "),r("p",[a._v("栈是一种特殊的线性表，它只能在一个表的一个固定端进行数据结点的插入和删除操作。栈按照后进先出的原则来存储数据，也就是说，先插入的数据将被压入栈底，最后插入的数据在栈顶，读出数据时，从栈顶开始逐个读出。栈在汇编语言程序中，经常用于重要数据的现场保护。栈中没有数据时，称为空栈。 [5]")]),a._v(" "),r("h3",{attrs:{id:"队列-queue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列-queue"}},[a._v("#")]),a._v(" 队列(Queue)")]),a._v(" "),r("p",[a._v("队列和栈类似，也是一种特殊的线性表。和栈不同的是，队列只允许在表的一端进行插入操作，而在另一端进行删除操作。一般来说，进行插入操作的一端称为队尾，进行删除操作的一端称为队头。队列中没有元素时，称为空队列。 [5]")]),a._v(" "),r("h3",{attrs:{id:"链表-linked-list"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链表-linked-list"}},[a._v("#")]),a._v(" 链表( Linked List)")]),a._v(" "),r("p",[a._v("链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。链表由一系列数据结点构成，每个数据结点包括数据域和指针域两部分。其中，指针域保存了数据结构中下一个元素存放的地址。链表结构中数据元素的逻辑顺序是通过链表中的指针链接次序来实现的。 [5]")]),a._v(" "),r("h3",{attrs:{id:"树-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树-tree"}},[a._v("#")]),a._v(" 树( Tree)")]),a._v(" "),r("p",[a._v("树是典型的非线性结构，它是包括，2个结点的有穷集合K。在树结构中，有且仅有一个根结点，该结点没有前驱结点。在树结构中的其他结点都有且仅有一个前驱结点，而且可以有两个后继结点，m≥0。 [5]")]),a._v(" "),r("h3",{attrs:{id:"图-graph"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#图-graph"}},[a._v("#")]),a._v(" 图(Graph)")]),a._v(" "),r("p",[a._v("图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。如果两个顶点之间存在一条边，那么就表示这两个顶点具有相邻关系。 [5]")]),a._v(" "),r("h3",{attrs:{id:"堆-heap"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[a._v("#")]),a._v(" 堆(Heap)")]),a._v(" "),r("p",[a._v("堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。堆的特点是根结点的值是所有结点中最小的或者最大的，并且根结点的两个子树也是一个堆结构。 [5]")]),a._v(" "),r("h3",{attrs:{id:"散列表-hash"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#散列表-hash"}},[a._v("#")]),a._v(" 散列表(Hash)")]),a._v(" "),r("p",[a._v("散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和T相等的记录，那么必定在F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录。 [5]")]),a._v(" "),r("h2",{attrs:{id:"_1-2常用算法编辑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2常用算法编辑"}},[a._v("#")]),a._v(" 1.2常用算法编辑")]),a._v(" "),r("p",[a._v("数据结构研究的内容：就是如何按一定的逻辑结构，把数据组织起来，并选择适当的存储表示方法把逻辑结构组织好的数据存储到计算机的存储器里。研究的目的是为了更有效的处理数据，提高数据运算效率。数据的运算是定义在数据的逻辑结构上，但运算的具体实现要在存储结构上进行。一般有以下几种常用运算：\n"),r("br"),a._v("\n(1)检索。检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。\n"),r("br"),a._v("\n(2)插入。往数据结构中增加新的节点。   \n"),r("br"),a._v("\n(3)删除。把指定的结点从数据结构中去掉。   \n"),r("br"),a._v("\n(4)更新。改变指定节点的一个或多个字段的值。  \n"),r("br"),a._v("\n(5)排序。把节点按某种指定的顺序重新排列。例如递增或递减。\n"),r("br")])])}),[],!1,null,null,null);t.default=e.exports}}]);