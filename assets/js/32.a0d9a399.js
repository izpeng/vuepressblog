(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{571:function(t,n,e){"use strict";e.r(n);var a=e(2),s=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_2-spring-框架mvc模块进阶"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring-框架mvc模块进阶"}},[t._v("#")]),t._v(" 2.SPRING 框架MVC模块进阶")]),t._v(" "),e("h2",{attrs:{id:"_2-1-spring-mvc-设计思想"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-spring-mvc-设计思想"}},[t._v("#")]),t._v(" 2.1.Spring MVC 设计思想")]),t._v(" "),e("h3",{attrs:{id:"_2-1-1-spring-mvc-设计思想分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-spring-mvc-设计思想分析"}},[t._v("#")]),t._v(" 2.1.1.Spring MVC 设计思想分析")]),t._v(" "),e("p",[t._v("MVC是一种分层架构设计思想，目的是基于对象职责上的不同，进行分层设计，实现各司其职，各尽所能，以提高代码的可维护性，可扩展性。\n1)生活中的MVC:正规饭店(菜单,服务员,厨师)\n2)程序中的MVC:(html,jsp)/servlet/(service,dao))")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" "),e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-7a786784d3ca41f4946261f296b671bd.png",alt:"image.png"}})]),t._v(" "),e("p",[t._v("SPRING MVC是Spring 框架中的一个WEB模块, 是基于MVC设思想的一种完美实现。")]),t._v(" "),e("h3",{attrs:{id:"_2-1-2-spring-mvc-核心对象及流程分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-spring-mvc-核心对象及流程分析"}},[t._v("#")]),t._v(" 2.1.2.Spring MVC 核心对象及流程分析")]),t._v(" "),e("p",[t._v("Spring MVC 处理流程及其核心组件对象构成，如下图所示：")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")]),t._v(" "),e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-349c5b35210b4a4b9bb0991a02d335bc.png",alt:"image.png"}})]),t._v(" "),e("p",[t._v("FAQ：说说spring MVC中的核心组件？\n1)DipatcherServlet:前端控制器(web服务器启动时加载)\n2)HandlerMapping:注册中心(负责存储url到后端控制器的映射)\n3)HandlerInterceptor:拦截器(请求到handler之间的拦截)\n4)Handler:后端处理器(又称之为Controller)\n5)ViewResolver:视图解析器(负责是视图页面进行解析)")]),t._v(" "),e("h2",{attrs:{id:"_2-2-spring-mvc-快速实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-spring-mvc-快速实践"}},[t._v("#")]),t._v(" 2.2.Spring MVC 快速实践")]),t._v(" "),e("h3",{attrs:{id:"_2-2-1-xml方式配置实现-脱离文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-xml方式配置实现-脱离文档"}},[t._v("#")]),t._v(" 2.2.1.xml方式配置实现(脱离文档)")]),t._v(" "),e("p",[t._v("1.创建maven项目")]),t._v(" "),e("p",[t._v("1)项目名称: CGB-SPRINGMVC-01\n2)组id: com.cy\n3)打包方式: war包方式")]),t._v(" "),e("p",[t._v("2.配置并初始化项目环境")]),t._v(" "),e("p",[t._v("1)生成web.xml(配置spring mvc 前端控制器)\n2)设置项目的运行时环境(选择tomcat,提供servlet支持)\n3)设置项目编码方式 utf-8\n4)设置统一编译环境 JDK8\n5)添加项目依赖:spring-webmvc\n6)添加spring mvc配置文件并进行配置:spring-configs.xml\n7)web.xml中配置spring mvc前端控制器(DispatcherServlet)\n8)部署项目,启动tomcat测试 (假如tomcat正常启动,则没问题)")]),t._v(" "),e("p",[t._v("说明:如上配置可参考后面内容中的关键代码分享.")]),t._v(" "),e("p",[t._v("3.Spring MVC基础业务实现")]),t._v(" "),e("p",[t._v("1)定义Controller类\na)包名:com.cy.pj.search.controller\nb)类名:SearchController")]),t._v(" "),e("p",[t._v("代码如下:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Controller\n@RequestMapping("/search/")\npublic class SearchController {\n}\n')])])]),e("p",[t._v("其中:@RequestMapping修饰类时用于定义请求路径")]),t._v(" "),e("p",[t._v("2)添加Controller方法\n方法1:此方法用于向客户端返回一个页面")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@RequestMapping("doSearchUI")\npublic String doSearchUI() {\nreturn "search";\n}\n')])])]),e("p",[t._v("其中:对于返回值search需要在/WEB-INF/pages/目录下有对应的\nsearch.html页面.")]),t._v(" "),e("p",[t._v("方法2:此方法用于向客户端返回一个json格式的字符串")]),t._v(" "),e("div",{staticClass:"language-java line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@RequestMapping")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doSearch"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@ResponseBody")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSearch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashMap")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tmap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tmap"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello everyone"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//{"state":1,"message":"hello everyone"}')]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[t._v("其中:\na)@ResponseBody修饰方法时,Spring MVC可以将方法的返回值以指定格式进行进行输出,例如JSON格式字符串.\nb)doSearch方法进行测试时,需要在项目中添加如下依赖:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-databind</artifactId>\n\t<version>2.9.9.3</version>\n</dependency>\n")])])]),e("p",[t._v("3)部署并启动服务测试.")]),t._v(" "),e("p",[t._v("4.关键代码分享:")]),t._v(" "),e("p",[t._v("spring-configs.xml")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('<?xml version="1.0" encoding="UTF-8"?>\n<beans xmlns="http://www.springframework.org/schema/beans"\n\txmlns:mvc="http://www.springframework.org/schema/mvc"\n\txmlns:context="http://www.springframework.org/schema/context"\n\txmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n\txsi:schemaLocation="\n\t\thttp://www.springframework.org/schema/beans\n\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context\n\t\thttp://www.springframework.org/schema/context/spring-context.xsd\n\t\thttp://www.springframework.org/schema/mvc\n\t\thttp://www.springframework.org/schema/mvc/spring-mvc.xsd">\n\n\t<context:component-scan base-package="com.cy.controller"/>\n\t\x3c!-- Enable MVC Configuration:启用默认bean对象(注解驱动)  --\x3e\n\t<mvc:annotation-driven/>\n\t\x3c!-- 启用 DefaultServletHttpRequestHandler对静态进行处理 --\x3e\n\t<mvc:default-servlet-handler/>\n\t\x3c!-- 配置视图解析器(ViewResolver)对象 --\x3e\n\t<bean id="viewResolver"  class="org.springframework.web.servlet.view.InternalResourceViewResolver">\n\t   \x3c!-- Set DI (默认找对象中的set方法)--\x3e\n\t   <property name="Prefix" value="/WEB-INF/pages/"/>\n\t   <property name="Suffix" value=".html"/>\n\t</bean>\n</beans>\n')])])]),e("p",[t._v("Web.xml")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('<?xml version="1.0" encoding="UTF-8"?>\n<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">\n  <display-name>CGB-SPRINGMVC-01</display-name>\n  \x3c!-- 配置前端控制器 --\x3e\n  <servlet>\n\t<servlet-name>frontController</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:spring-configs.xml</param-value>\n\t</init-param>\n\t\x3c!-- tomcat 启动时则初始化servlet,数字越小优先级越高 --\x3e\n\t<load-on-startup>1</load-on-startup>\n  </servlet>\n  <servlet-mapping>\n\t <servlet-name>frontController</servlet-name>\n\t <url-pattern>/</url-pattern>\n  </servlet-mapping>\n</web-app>\n')])])]),e("p",[t._v("SearchController")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.search.controller;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n@Controller \n@RequestMapping("/search/") \npublic class SearchController {\n\t@RequestMapping("doSearchUI")\n\tpublic String doSearchUI() {\n\t\treturn "search";\n\t}///WEB-INF/pages/search.html\n\n\t@RequestMapping("doSearch")\n\t@ResponseBody\n\tpublic Object doSearch(String key) {\n\t\tMap<String,Object> map=new HashMap<String,Object>();\n\t\tmap.put("state", 1);\n\t\tmap.put("message","hello everyone");\n\t\treturn map;//{"state":1,"message":"hello everyone"}\n\t}\n}\n')])])]),e("h3",{attrs:{id:"_2-2-2-注解方式配置实现（脱离文档）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-注解方式配置实现（脱离文档）"}},[t._v("#")]),t._v(" 2.2.2.注解方式配置实现（脱离文档）")]),t._v(" "),e("p",[t._v("Tomcat 启动加载方式:")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[t._v("#")]),t._v(" "),e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-20db542cf104453c8a8451787821bda0.png",alt:"image.png"}})]),t._v(" "),e("p",[t._v("1.创建maven项目")]),t._v(" "),e("p",[t._v("1)项目名称: CGB-SPRINGMVC-02\n2)组id: com.cy\n3)打包方式: war包方式")]),t._v(" "),e("p",[t._v("2.配置并初始化项目环境(重点对xml方式进行重构)")]),t._v(" "),e("p",[t._v("1)配置maven war包插件(忽略web.xml)\n2)设置项目的运行时环境(选择tomcat)\n3)设置项目编码方式 utf-8\n4)设置统一编译环境 JDK8\n5)添加项目依赖:spring-webmvc\n6)添加spring mvc配置类:SpringWebConfig类\n7)创建WebInitializer类配置spring mvc(例如前端控制器)。\n8)部署项目,启动tomcat测试 (假如tomcat正常启动,则没问题)")]),t._v(" "),e("p",[t._v("3.Spring MVC基础业务实现 (参考xml方式业务代码实现)")]),t._v(" "),e("p",[t._v("4.Spring mvc 注解方式应用分析:")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[t._v("#")]),t._v(" "),e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-de958697c6d948dda4e45ae287c18496.png",alt:"image.png"}})]),t._v(" "),e("p",[t._v("其中META-INF目录可在sping-web.jar中进行查看.")]),t._v(" "),e("p",[t._v("关键代码分析:")]),t._v(" "),e("p",[t._v("SpringWebConfig类")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Configuration \n@ComponentScan("com.cy.pj.search.controller")\n@EnableWebMvc //<mvc:annotation-driven/>\npublic class SpringWebConfig implements WebMvcConfigurer{\n\t//<mvc:default-servlet-handler/>\n\t@Override\n\tpublic void configureDefaultServletHandling(\n\t\t\tDefaultServletHandlerConfigurer configurer) {\n\t\tconfigurer.enable();\n\t}\n\t@Override\n\tpublic void configureViewResolvers(\n\t\tViewResolverRegistry registry) {\n\t\tregistry.jsp("/WEB-INF/pages/",".html");\n\t}\n}\n')])])]),e("p",[t._v("WebInitializer类")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public class WebInitializer extends \nAbstractAnnotationConfigDispatcherServletInitializer {\n\n\t//Service,Repository\n\t@Override\n\tprotected Class<?>[] getRootConfigClasses() {\n\t\tSystem.out.println("getRootConfigClasses()");\n\t\treturn null;\n\t}\n\t//View,Controller\n\t@Override\n\tprotected Class<?>[] getServletConfigClasses() {\n\t\tSystem.out.println("getServletConfigClasses()");\n\t\treturn new Class[] {SpringWebConfig.class};\n\t}\n\t@Override\n\tprotected String[] getServletMappings() {\n\t\tSystem.out.println("getServletMappings()");\n\t\treturn new String[] {"/"};\n\t}\n}\n')])])]),e("h2",{attrs:{id:"_2-3-spring-mvc-请求响应处理增强分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-spring-mvc-请求响应处理增强分析"}},[t._v("#")]),t._v(" 2.3.Spring MVC 请求响应处理增强分析")]),t._v(" "),e("p",[t._v("所有MVC框架的重点都在请求和响应数据的处理上。")]),t._v(" "),e("h3",{attrs:{id:"_2-3-1-请求处理增强分析及实现-重点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1-请求处理增强分析及实现-重点"}},[t._v("#")]),t._v(" 2.3.1.请求处理增强分析及实现(重点)")]),t._v(" "),e("p",[t._v("Spring MVC请求处理主要从如下几个方面进行考虑：\n1)请求路径(普通方式，rest方式) ：404\n2)请求方式(Get请求，Post请求,…):405\n3)请求参数(直接量，POJO对象，MAP对象):400")]),t._v(" "),e("p",[t._v("代码分析如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Controller\n@RequestMapping("/request/")\npublic class RequestHandleController {\n\t //===请求url定义 \n\t  //普通URL定义实现(多个url可以对应同一个资源)\n\t  @RequestMapping(value={"doHandleUrl","doWelcomeUI"})\n\t  public String doHandleUrl() {\n\t\t return "welcome"; \n\t  }\n\t  //REST风格的URL，其url格式为{a}/{b}/{c}\n\t  //假如希望方法参数获取url中{}表达式内部的值\n\t  //可以使用@PathVariable对参数进行修饰\n\t  @RequestMapping("{module}/{page}")\n\t  public String doMoudleUrl(\n\t\t\t  @PathVariable String module,\n\t\t\t  @PathVariable String page) {\n\t\t return module+"/"+page;\n\t  }\n\t  //===请求方式定义\n\t  //@RequestMapping(value="type",method=RequestMethod.GET)\n\t  @GetMapping("type")\n\t  //@PostMapping("type")\n\t  @ResponseBody\n\t  public String doRequestType() {\n\t\t  return "request type";\n\t  }\n\t  //=====请求参数处理======\n\t  @GetMapping("param")\n\t  @ResponseBody\n\t  public String doRequestParam(\n\t\t\t RequestWrapper rw,//pojo\n\t\t\t @RequestParam(required=false) String msg,\n\t\t\t @DateTimeFormat(pattern="yyyy/MM/dd")Date begin) {\n\t\t  return "request parameter handle msg="+msg+",begin="+begin+",rw="+rw.toString();\n\t  }\n}\n')])])]),e("h3",{attrs:{id:"_2-3-2-响应处理增强分析实现（重点）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2-响应处理增强分析实现（重点）"}},[t._v("#")]),t._v(" 2.3.2.响应处理增强分析实现（重点）")]),t._v(" "),e("p",[t._v("Spring MVC响应处理主要从如下几个方面进行考虑：\n1）响应方式(转发forward，重定向redirect)\n2）响应数据封装(ModelAndView,Model,Map,Pojo)\n3）响应数据转换（将对象序列化为JSON格式字符串）")]),t._v(" "),e("p",[t._v("代码分析如下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Controller\n@RequestMapping("/resp/")\npublic class ResponseHandleController {\n\t @RequestMapping("doResponseUI")\n\t public String doResponseUI() {\n\t\t return "response";\n\t }\n\t @RequestMapping("type")\n\t public String doResponseType() {\n\t\t //转发(客户端请求一次)\n\t\t return "forward:doResponseUI";//address\n\t\t //重定向(客户端两次请求)\n\t\t //return "redirect:doResponseUI";//address\n\t }\n\n\t @RequestMapping("doDataConvert")\n\t @ResponseBody\n\t public String doDataConvert()throws Exception {\n\t\t Map<String,Object> map=new HashMap<String,Object>();\n\t\t map.put("id", 100);\n\t\t map.put("msg", "hello jackson");\n\t\t //借助jackson中的API将对象转换json格式的字符串\n\t\t ObjectMapper om=new ObjectMapper();\n\t\t return om.writeValueAsString(map);\n\t }\n}\n')])])]),e("h1",{attrs:{id:"少年易老学难成，一寸光阴不可轻。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#少年易老学难成，一寸光阴不可轻。"}},[t._v("#")]),t._v(" 少年易老学难成，一寸光阴不可轻。")])])}),[],!1,null,null,null);n.default=s.exports}}]);