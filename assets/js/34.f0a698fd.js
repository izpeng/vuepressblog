(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{570:function(t,n,e){"use strict";e.r(n);var o=e(2),a=Object(o.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_2-ssm框架综合案例实现-注解方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-ssm框架综合案例实现-注解方式"}},[t._v("#")]),t._v(" 2.SSM框架综合案例实现(注解方式)")]),t._v(" "),e("h2",{attrs:{id:"_2-1-业务描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-业务描述"}},[t._v("#")]),t._v(" 2.1.业务描述")]),t._v(" "),e("p",[t._v("通过spring整合mybatis完成商品数据库中数据的查询,并在客户端以json格式对数据进行输出?\n思路:\n1)创建maven web项目(打包方式war):CGB-SSM-01\n2)配置项目?(运行时环境,编码,编译版本)\n3)添加依赖?(mysql,druid,mybatis,junit,spring-webmvc,..)\n4)整合资源?(连接池,mybatis,spring mvc..)")]),t._v(" "),e("h2",{attrs:{id:"_2-2-初始化化数据环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-初始化化数据环境"}},[t._v("#")]),t._v(" 2.2.初始化化数据环境")]),t._v(" "),e("p",[t._v("数据库脚本分析:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("drop database if exists dbgoods;\ncreate database dbgoods default character set utf8;\nuse dbgoods;\ncreate table tb_goods(\n   id bigint auto_increment,\n   name varchar(200) not null,\n   remark text,\n   createdTime datetime,\n   primary key (id)\n)engine=InnoDB;\n\ninsert into tb_goods values (null,'A','A...',now());\ninsert into tb_goods values (null,'B','B...',now());\ninsert into tb_goods values (null,'C','C...',now());\n")])])]),e("p",[t._v("说明:可以将如上脚本写到db-goods.sql文件中,然后去执行完成完成初始化.")]),t._v(" "),e("h2",{attrs:{id:"_2-3-项目创建及配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-项目创建及配置"}},[t._v("#")]),t._v(" 2.3.项目创建及配置")]),t._v(" "),e("p",[t._v("1.创建maven web项目:CGB-SSM-01\n2.在pom.xml添加war包插件,修改其配置(这样项目可以不写web.xml)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" <build>\n\t<plugins>\n\t\t<plugin>\n\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t<artifactId>maven-war-plugin</artifactId>\n\t\t\t<version>2.6</version>\n\t\t\t<configuration>\n\t\t\t  <failOnMissingWebXml>false</failOnMissingWebXml>\n\t\t\t</configuration>\n\t\t</plugin>\n\t</plugins>\n  </build>\n")])])]),e("p",[t._v("3.配置项目(设置运行时环境-tomcat,编译版本JDK1.8)\n4.添加项目依赖(参考如下图中的依赖)\n"),e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-e0e83512c916471aaa3961fc4299d37b.png",alt:"image.png"}})]),t._v(" "),e("h2",{attrs:{id:"_2-4-项目资源整合实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-项目资源整合实现"}},[t._v("#")]),t._v(" 2.4.项目资源整合实现")]),t._v(" "),e("h3",{attrs:{id:"_2-4-1-配置架构分析及实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-1-配置架构分析及实现"}},[t._v("#")]),t._v(" 2.4.1.配置架构分析及实现")]),t._v(" "),e("p",[t._v("配置架构分析:")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-b79885d125f24239b23067babe1e3333.png",alt:"image.png"}})]),t._v(" "),e("p",[t._v("其中:\n1)SpringRepositoryConfig 负责数据层配置\n2)SpringServiceConfig负责业务层配置\n3)SpringWebConfig负责请求处理层配置(Spring MVC中的V,C)\n4)WebInitializer 负责启动初始化.")]),t._v(" "),e("p",[t._v("基于配置架构,创建配置类:")]),t._v(" "),e("p",[t._v("数据层配置类")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.common.config;\n@Configuration\n@MapperScan("com.cy.pj.goods.dao")//扫描dao\npublic class SpringRepositoryConfig {\n}\n')])])]),e("p",[t._v('业务层配置类:\npackage com.cy.pj.common.config;\n@Configuration\n@ComponentScan("com.cy.pj.goods.service")\npublic class SpringServiceConfig {\n//.....\n}')]),t._v(" "),e("p",[t._v("控制层配置类")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.common.config;\n@ComponentScan("com.cy.pj.goods.controller")\n@EnableWebMvc\n@Configuration \npublic class SpringWebConfig implements WebMvcConfigurer{\n\n}\n')])])]),e("p",[t._v("WebInitializer 启动类配置:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.common.config;\n//--\x3eweb.xml\npublic class WebInitializer extends \nAbstractAnnotationConfigDispatcherServletInitializer {\n\t//Service,Repository\n\t@Override\n\tprotected Class<?>[] getRootConfigClasses() {\n\t\tSystem.out.println("getRootConfigClasses()");\n\t\treturn new Class[] {SpringRepositoryConfig.class,\nSpringServiceConfig.class};\n\t}\n\t//View,Controller\n\t@Override\n\tprotected Class<?>[] getServletConfigClasses() {\n\t\tSystem.out.println("getServletConfigClasses()");\n\t\treturn new Class[] {SpringWebConfig.class};\n\t}\n\t@Override\n\tprotected String[] getServletMappings() {\n\t\tSystem.out.println("getServletMappings()");\n\t\treturn new String[] {"/"};\n\t}\n\n}\n')])])]),e("p",[t._v("整合过程分析:(顺序从右到左)\n"),e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-2c8c25e8740f4e56b2b9d96c7e01008a.png",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"_2-4-2-整合连接池对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-2-整合连接池对象"}},[t._v("#")]),t._v(" 2.4.2.整合连接池对象")]),t._v(" "),e("p",[t._v("在SpringRepositoryConfig 类中添加dataSource()方法,在方法中创建\nDruidDataSource对象.并将此对象交给spring管理.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Bean(value="druid",initMethod="init",destroyMethod="close")\npublic DruidDataSource dataSource() {\n\tDruidDataSource ds=new DruidDataSource();\n\tds.setUrl("jdbc:mysql:///dbgoods?serverTimezone=GMT%2B8");\n\tds.setUsername("root");\n\tds.setPassword("root");\n\treturn ds;\n}\n')])])]),e("p",[t._v("说明:@Bean注解要配合@Configuration注解使用,@Configuration用于描述类.")]),t._v(" "),e("h3",{attrs:{id:"_2-4-3-整合mybatis框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-3-整合mybatis框架"}},[t._v("#")]),t._v(" 2.4.3.整合mybatis框架")]),t._v(" "),e("p",[t._v("在SpringRepositoryConfig类中添加创建SqlSessionFactory对象创建\n的方法:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Bean("sqlSessionFactory")\npublic SqlSessionFactory newSqlSessionFactory(\n\t\tDataSource dataSource) \n\t\tthrows Exception {\n  //构建SqlSessionFactoryBean对象\n  SqlSessionFactoryBean factoryBean =\n  new SqlSessionFactoryBean();\n  factoryBean.setDataSource(dataSource);\n  //调用FactoryBean的getObject方法创建SqlSessionFactory\n  //底层会使用SqlSessionFactoryBuilder创建\n  return factoryBean.getObject();\n}\n')])])]),e("p",[t._v("参考:www.mybatis.org/spring")]),t._v(" "),e("h3",{attrs:{id:"_2-4-4-整合spring-mvc-模块"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-4-整合spring-mvc-模块"}},[t._v("#")]),t._v(" 2.4.4.整合Spring MVC 模块")]),t._v(" "),e("p",[t._v("在Spring MVC配置类中添加视图解析配置,默认servlet处理等配置.")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.common.config;\n\n@Configuration \n@ComponentScan("com.cy.pj.goods.controller")\n@EnableWebMvc //<mvc:annotation-driven/>\npublic class SpringWebConfig implements WebMvcConfigurer{\n\t//<mvc:default-servlet-handler/>\n\t@Override\n\tpublic void configureDefaultServletHandling(\n\t\t\tDefaultServletHandlerConfigurer configurer) {\n\t\tconfigurer.enable();\n\t}\n\t@Override\n\tpublic void configureViewResolvers(\n\t\tViewResolverRegistry registry) {\n\t\tregistry.jsp("/WEB-INF/pages/",".html");\n\t}\n}\n')])])]),e("h2",{attrs:{id:"_2-5-业务设计分析及实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-业务设计分析及实现"}},[t._v("#")]),t._v(" 2.5.业务设计分析及实现")]),t._v(" "),e("h3",{attrs:{id:"_2-5-1-业务架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-业务架构"}},[t._v("#")]),t._v(" 2.5.1.业务架构")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://www.zhangpeng.fun/upload/2019/12/image-672453807116433ca5a8bab6a294760f.png",alt:"image.png"}})]),t._v(" "),e("h3",{attrs:{id:"_2-5-2-pojo实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-pojo实现"}},[t._v("#")]),t._v(" 2.5.2.POJO实现")]),t._v(" "),e("p",[t._v("定义pojo对象Goods用于封装数据:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.goods.pojo;\nimport java.io.Serializable;\nimport java.util.Date;\npublic class Goods implements Serializable{\n\tprivate static final long serialVersionUID = 690138036951052829L;\n\tprivate Long id;\n\tprivate String name;\n\tprivate String remark;\n\tprivate Date createdTime;\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic String getRemark() {\n\t\treturn remark;\n\t}\n\n\tpublic void setRemark(String remark) {\n\t\tthis.remark = remark;\n\t}\n\n\tpublic Date getCreatedTime() {\n\t\treturn createdTime;\n\t}\n\n\tpublic void setCreatedTime(Date createdTime) {\n\t\tthis.createdTime = createdTime;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn "Goods [id=" + id + ", name=" + name + ", remark=" + remark + ", createdTime=" + createdTime + "]";\n\t}\n}\n')])])]),e("h3",{attrs:{id:"_2-5-3-dao实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-dao实现"}},[t._v("#")]),t._v(" 2.5.3.Dao实现")]),t._v(" "),e("p",[t._v("定义GoodsDao接口,代码如下:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.goods.dao;\nimport org.apache.ibatis.annotations.Select;\npublic interface GoodsDao {\n\n@Select("select * from tb_goods")\n\tList<Goods> findGoods();\n}\n')])])]),e("p",[t._v("在SpringRepositoryConfig类上添加@MapperScan注解,实现对指定包下Dao接口的扫描:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('@Configuration\n@MapperScan("com.cy.pj.goods.dao")//扫描dao\npublic class SpringRepositoryConfig {\n  //....\n}\n')])])]),e("p",[t._v("编写单元测试类TestGoodsDao,然后getRowCount方法进行测试")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public class TestGoodsDao extends TestBase{\n\t @Test\n\t public void testFindGoods() {\n\t\t   GoodsDao dao=ctx.getBean("goodsDao",GoodsDao.class);\n\t\t   List<Goods> list=dao.findGoods();\n\t\t   for(Goods g:list) {\n\t\t\tSystem.out.println(g);\n\t\t   }\n\t }\n}\n')])])]),e("h3",{attrs:{id:"_2-5-4-service实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-service实现"}},[t._v("#")]),t._v(" 2.5.4.Service实现")]),t._v(" "),e("p",[t._v("创建GoodsService接口,实现具体业务:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("package com.cy.pj.goods.service;\nimport java.util.List;\nimport com.cy.pj.goods.pojo.Goods;\npublic interface GoodsService {\n\t List<Goods> findGoods();\n}\n")])])]),e("p",[t._v("创建接口实现类:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("package com.cy.pj.goods.service.impl;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport com.cy.pj.goods.dao.GoodsDao;\nimport com.cy.pj.goods.pojo.Goods;\nimport com.cy.pj.goods.service.GoodsService;\n@Service\npublic class GoodsServiceImpl implements GoodsService {\n\t@Autowired\n\tprivate GoodsDao goodsDao;\n\t@Override\n\tpublic List<Goods> findGoods() {\n\t\t//...\n\t\tList<Goods> list=goodsDao.findGoods();\n\t\t//...\n\t\treturn list;\n\t}\n}\n")])])]),e("p",[t._v("编写Service配置类(需要在容器启动时加载),对service对象进行扫描")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.common.config;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\n@ComponentScan("com.cy.pj.goods.service")\npublic class SpringServiceConfig {\n\n\t//.....\n}\n')])])]),e("p",[t._v("编写测试类执行单元测试:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('public class TestGoodsService extends TestBase{\n\t@Test\n\tpublic void testFindGoods() {\n\t\tGoodsService gs=\n\t\tctx.getBean("goodsServiceImpl", GoodsService.class);\n\t\tList<Goods> list=gs.findGoods();\n\t\tfor(Goods g:list) {\n\t\t\tSystem.out.println(g);\n\t\t}\n\t}\n}\n')])])]),e("p",[t._v("2.5.5.Controller实现\n编写controller,用于处理客户端的请求:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('package com.cy.pj.goods.controller;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.cy.pj.goods.pojo.Goods;\nimport com.cy.pj.goods.service.GoodsService;\n\n@Controller\n@RequestMapping("/goods/")\npublic class GoodsController {\n\t@Autowired\n\tprivate GoodsService goodsService;\n\t@RequestMapping("doFindGoods")\n\t@ResponseBody\n\tpublic List<Goods> doFindGoods(){\n\t\treturn goodsService.findGoods();\n\t}//json 串:spring mvc 启动API将对象转换为JSON串\n}\n')])])]),e("p",[t._v("2.6.项目部署及运行分析\n项目部署到tomcat,然后启动进行访问测试.")]),t._v(" "),e("p",[t._v("http://localhost/CGB-SSM-01/goods/doFindGoods")]),t._v(" "),e("h1",{attrs:{id:"少年易老学难成，一寸光阴不可轻。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#少年易老学难成，一寸光阴不可轻。"}},[t._v("#")]),t._v(" 少年易老学难成，一寸光阴不可轻。")])])}),[],!1,null,null,null);n.default=a.exports}}]);